--- myGenomesDrawer.py	(original)
+++ myGenomesDrawer.py	(refactored)
@@ -13,17 +13,18 @@
 import collections
 import itertools
 
-import myTools
-import myDiags
-import myMapping
-import mySvgDrawer
-import myLightGenomes
-from mySvgDrawer import Point
+from . import myTools
+from . import myDiags
+from . import myMapping
+from . import mySvgDrawer
+from . import myLightGenomes
+from .mySvgDrawer import Point
+from functools import reduce
 
 # see the css joint file "HomologyGroup" ranges from 0 to 44 (included)
-HomologyGroupRange = range(3, 44+1)
+HomologyGroupRange = list(range(3, 44+1))
 # see the css joint file "NoHomologyInWindow" ranges from 0 to 14 (included)
-NoHomologyInWindowRange = range(3, 14+1)
+NoHomologyInWindowRange = list(range(3, 14+1))
 
 FilterType = myDiags.FilterType
 
@@ -32,7 +33,7 @@
 def parseChrRange(text, genome, g2gtb=None):
     if len(text.split(":")) == 2:
         chr = text.split(":")[0]
-        if chr not in genome.keys():
+        if chr not in list(genome.keys()):
             raise ValueError("chr %s not in genome" % chr)
     else:
         raise ValueError('range not formated as expected : \"chr:deb-fin\"')
@@ -45,10 +46,10 @@
             if targetIdxG1 in g2gtb[chr]:
                 range[0] = g2gtb[chr][targetIdxG1]
             else:
-                print >> sys.stderr, "Warning, gene %s at %s:%s is not part of a tandem block, thus we take the nearest tandem block" % \
-                                     (genome[chr][targetIdxG1].n, chr, targetIdxG1 + 1)
-                idxGeneThatIsInTargetTb1 = min(g2gtb[chr].keys(), key=lambda x: abs(x-targetIdxG1))
-                print >> sys.stderr, "Warning: abs(idxGeneThatIsInTargetTb1 - targetIdxG1) = %s" % abs(idxGeneThatIsInTargetTb1 - targetIdxG1)
+                print("Warning, gene %s at %s:%s is not part of a tandem block, thus we take the nearest tandem block" % \
+                                     (genome[chr][targetIdxG1].n, chr, targetIdxG1 + 1), file=sys.stderr)
+                idxGeneThatIsInTargetTb1 = min(list(g2gtb[chr].keys()), key=lambda x: abs(x-targetIdxG1))
+                print("Warning: abs(idxGeneThatIsInTargetTb1 - targetIdxG1) = %s" % abs(idxGeneThatIsInTargetTb1 - targetIdxG1), file=sys.stderr)
                 range[0] = g2gtb[chr][idxGeneThatIsInTargetTb1]
             if range[1] == '~':
                 range[1] = max(idxTb for idxTb in g2gtb[chr])
@@ -57,10 +58,10 @@
                 if targetIdxG2 in g2gtb[chr]:
                     range[1] = g2gtb[chr][targetIdxG2] + 1
                 else:
-                    print >> sys.stderr, "Warning, gene %s at %s:%s is not part of a tandem block, thus we take the nearest tandem block" % \
-                                         (genome[chr][targetIdxG2].n, chr, targetIdxG2 + 1)
-                    idxGeneThatIsInTargetTb2 = min(g2gtb[chr].keys(), key=lambda x: abs(x-targetIdxG2))
-                    print >> sys.stderr, "Warning: abs(idxGeneThatIsInTargetTb2 - targetIdxG2) = %s" % abs(idxGeneThatIsInTargetTb2 - targetIdxG2)
+                    print("Warning, gene %s at %s:%s is not part of a tandem block, thus we take the nearest tandem block" % \
+                                         (genome[chr][targetIdxG2].n, chr, targetIdxG2 + 1), file=sys.stderr)
+                    idxGeneThatIsInTargetTb2 = min(list(g2gtb[chr].keys()), key=lambda x: abs(x-targetIdxG2))
+                    print("Warning: abs(idxGeneThatIsInTargetTb2 - targetIdxG2) = %s" % abs(idxGeneThatIsInTargetTb2 - targetIdxG2), file=sys.stderr)
                     range[1] = g2gtb[chr][idxGeneThatIsInTargetTb2] + 1
         else:
             range = (int(range[0])-1, int(range[1]) if range[1] != '~' else len(genome[chr]))
@@ -129,7 +130,7 @@
 
     #Â Must be applied on the two genomes
     if len((g1_fID.getGeneNames(checkNoDuplicates=False) & g2_fID.getGeneNames(checkNoDuplicates=False)) - {None}) == 0:
-        print >> sys.stderr, "Warning, no homologs"
+        print("Warning, no homologs", file=sys.stderr)
     ((g1_fID_filt, Gf2GfID1, (nCL1, nGL1)),
      (g2_fID_filt, Gf2GfID2, (nCL2, nGL2))) = myDiags.filter2D(g1_fID, g2_fID,
                                                                filterType,
@@ -143,8 +144,10 @@
                                                              mOld=Gf2GfID2)
     return ((g1_tb, g1_fID, Gtb2GfID1), (g2_tb, g2_fID, Gtb2GfID2))
 
-def computeHomologyInformations(chr1, chr2, (g1, g1_tb, g1_fID, Gtb2GfID1), (g2, g2_tb, g2_fID, Gtb2GfID2)):
+def computeHomologyInformations(chr1, chr2, xxx_todo_changeme, xxx_todo_changeme1):
     #Focus on the chromosome of the window
+    (g1, g1_tb, g1_fID, Gtb2GfID1) = xxx_todo_changeme
+    (g2, g2_tb, g2_fID, Gtb2GfID2) = xxx_todo_changeme1
     chrom1_ = g1[chr1]
     chrom2_ = g2[chr2]
     c1_fID = g1_fID[chr1]
@@ -235,7 +238,7 @@
 
     def getLevel(self, differentFrom=set()):
         if len(differentFrom.intersection(self.availableLevels)) == len(self.availableLevels):
-            print >> sys.stderr, "Warning: too many colors too avoid, thus a non-optimal choice of the color is made"
+            print("Warning: too many colors too avoid, thus a non-optimal choice of the color is made", file=sys.stderr)
             self.currIdx = 0
         else:
             while self.currIdx in differentFrom:
@@ -290,11 +293,11 @@
                                       greyLevelsGenerator=None,
                                       geneWidth=None):
     if greyIdToGeneIdxs:
-        greyGidxs = set([gIdx for gIdxs in greyIdToGeneIdxs.values() for gIdx in gIdxs])
+        greyGidxs = set([gIdx for gIdxs in list(greyIdToGeneIdxs.values()) for gIdx in gIdxs])
     if whiteGenesIdxs and greyIdToGeneIdxs:
         assert len(set(whiteGenesIdxs) &  greyGidxs) == 0
     if coloredName2Idxs:
-        coloredGidx = set([gIdx for gIdxs in coloredName2Idxs.values() for gIdx in gIdxs])
+        coloredGidx = set([gIdx for gIdxs in list(coloredName2Idxs.values()) for gIdx in gIdxs])
     if whiteGenesIdxs and coloredName2Idxs:
         assert len(set(whiteGenesIdxs) & coloredGidx) == 0
     if greyIdToGeneIdxs and coloredName2Idxs:
@@ -312,7 +315,7 @@
         differentHalfIntergeneLengths = True
 
     def giveGreyLevelsTo(chromosome, greyIdToGeneIdxs):
-        for (greyId, geneIdxs) in greyIdToGeneIdxs.iteritems():
+        for (greyId, geneIdxs) in greyIdToGeneIdxs.items():
             nLevels = reduce(lambda x, y: x | y, [neighboursLevels(chromosome, gIdx) for gIdx in geneIdxs])
             for gIdx in geneIdxs:
                 # Choose a level different from the direct neighbours
@@ -378,7 +381,7 @@
         cx += intergeneLeft + lengthGene + intergeneRight
 
     if coloredName2Idxs:
-        for (coloredName, idxGs) in coloredName2Idxs.iteritems():
+        for (coloredName, idxGs) in coloredName2Idxs.items():
             if name2color:
                 color = name2color[coloredName]
             else:
@@ -467,7 +470,7 @@
     end_old = 0
     for (idxG, (beg, end)) in enumerate(listOfGenesCoordinates):
         # DEBUG
-        print >> sys.stderr, str((beg_old, end_old, beg, end))
+        print(str((beg_old, end_old, beg, end)), file=sys.stderr)
         # 1) take the coordinates (beg, end) of the genes and edit the coordinates if they overlap
         if idxG > 0: assert beg_old < end_old
         assert beg < end
@@ -477,8 +480,8 @@
         else:
             assert beg < end_old
             # overlap!
-            print >> sys.stderr, 'Warning: Overlapping genes extremities beg_right=%s < end_left=%s' % (beg, end_old)
-            print >> sys.stderr, 'This should not happen if genes were indexed on there 5\' extremities and if they do not overlap'
+            print('Warning: Overlapping genes extremities beg_right=%s < end_left=%s' % (beg, end_old), file=sys.stderr)
+            print('This should not happen if genes were indexed on there 5\' extremities and if they do not overlap', file=sys.stderr)
             # The only solution to get out of this mess is to truncated the former gene
             if end_old < end:
                 if (beg_old < beg < end_old < end):
@@ -488,13 +491,13 @@
                     assert (beg < beg_old < end_old < end), '%s' % str((beg_old, beg, end_old, end))
                     (beg_old, end_old, beg, end) = (beg_old, end_old - 0.0000000001, end_old, end)
             else:
-                print >> sys.stderr, 'Warning: genes are nested!'
+                print('Warning: genes are nested!', file=sys.stderr)
                 assert beg_old < beg < end <= end_old
                 # the current gene is nested in the previous beg_old
                 (beg_old, end_old, beg, end) = (beg_old, beg - 0.0000000001, end, end_old)
             # edit the former gene length
             if idxG > 0: assert beg_old < end_old <= beg < end
-            print >> sys.stderr, 'Warning: because of overlapping genes, the gene coordinates have been edited'
+            print('Warning: because of overlapping genes, the gene coordinates have been edited', file=sys.stderr)
             listOfGenesCoordinates[idxG - 1] = (beg_old, end_old)
             listOfGenesCoordinates[idxG] = (beg, end)
             chrGeneLengths[idxG - 1] = abs(beg_old - end_old)
@@ -621,7 +624,7 @@
             name2color[geneName] = colorsGenerator.getLevel()
 
     genomeItems = collections.OrderedDict()
-    for (chr, chrom) in genome.iteritems():
+    for (chr, chrom) in genome.items():
         genesStrands = [s for (_, s) in chrom]
         if genesCoordinates is None:
             chrGeneLengths = lengthGenes[chr] if isinstance(lengthGenes, dict) else lengthGenes
@@ -718,7 +721,7 @@
     smallestVisibleWidth=smallestVisibleWidthForGoodConversionIntoPDF
     strokeWidthHomologies = 0 if sizeCell * scaleFactorRectangles < 10 * smallestVisibleWidth else smallestVisibleWidth
     # draw Diagonals first because they are on the background
-    print >> sys.stderr, "Nb of diagonals showed = ", len(coordsOfHomologiesPerDiags)
+    print("Nb of diagonals showed = ", len(coordsOfHomologiesPerDiags), file=sys.stderr)
 
     # sort diagonals to give colors according to localisations of diagonals
 
@@ -805,7 +808,7 @@
                                                                    bigger=scaleFactorRectangles,
                                                                    strokeWidth=strokeWidthHomologies))
     if nx < 20 and ny < 20:
-        for (i1, i2) in itertools.product(range(nx), range(ny)):
+        for (i1, i2) in itertools.product(list(range(nx)), list(range(ny))):
             if (i1, i2) not in nonZeroValues:
                 cx = i1 * sizeCell
                 cy = i2 * sizeCell
@@ -1073,13 +1076,13 @@
     else:
         sbsInPairComp = myTools.OrderedDict2dOfLists()
 
-    cx = len(genome1.keys())
+    cx = len(list(genome1.keys()))
     # whole number of genes on the x-axis genome (genome1)
-    wnx = sum([len(chrom) for chrom in genome1.values()])
-
-    cy = len(genome2.keys())
+    wnx = sum([len(chrom) for chrom in list(genome1.values())])
+
+    cy = len(list(genome2.keys()))
     # whole number of genes on the y-axis genome (genome2)
-    wny = sum([len(chrom) for chrom in genome2.values()])
+    wny = sum([len(chrom) for chrom in list(genome2.values())])
 
     drawChromosomes = True if max(wny, wnx) <= 300 else False
 
@@ -1103,8 +1106,8 @@
     ((g1_tb, g1_fID, Gtb2GfID1), (g2_tb, g2_fID, Gtb2GfID2)) = editGenomes(genome1, genome2, families,
                                                                            filterType, minChromLength, tandemGapMax)
     # sort chromosome by decreasing lengths
-    sortedChrs1 = [c for (c, nbGenes) in sorted(g1_tb.iteritems(), key=lambda x: len(x[1]), reverse=True)]
-    sortedChrs2 = [c for (c, nbGenes) in sorted(g2_tb.iteritems(), key=lambda x: len(x[1]), reverse=True)]
+    sortedChrs1 = [c for (c, nbGenes) in sorted(iter(g1_tb.items()), key=lambda x: len(x[1]), reverse=True)]
+    sortedChrs2 = [c for (c, nbGenes) in sorted(iter(g2_tb.items()), key=lambda x: len(x[1]), reverse=True)]
 
     # for each pairwise comparison prepare the homology matrix
     cumulatedX = lchrNames
@@ -1160,11 +1163,11 @@
             progressBar.printProgressIn(sys.stderr, i1 + i2)
         cumulatedY = height - lchrNames
         cumulatedX += nx * sizeCase + sizeCase
-    print >> sys.stderr, '## Nb pair. comp. with sbs = %s' % nbCompWithSb
+    print('## Nb pair. comp. with sbs = %s' % nbCompWithSb, file=sys.stderr)
     nbComps = len(sortedChrs1) * len(sortedChrs2)
-    print >> sys.stderr, '## Nb chrs1 = %s, Nb chrs2 = %s' % (len(sortedChrs1), len(sortedChrs2))
-    print >> sys.stderr, '## Nb pair. comp. = %s' % nbComps
-    print >> sys.stderr, '## prop. comp. with sbs = %.2f' % (float(nbCompWithSb) / float(nbComps))
+    print('## Nb chrs1 = %s, Nb chrs2 = %s' % (len(sortedChrs1), len(sortedChrs2)), file=sys.stderr)
+    print('## Nb pair. comp. = %s' % nbComps, file=sys.stderr)
+    print('## prop. comp. with sbs = %.2f' % (float(nbCompWithSb) / float(nbComps)), file=sys.stderr)
     # last horizontal line
     listOfItems.append(mySvgDrawer.Line(Point(lchrNames, 0),
                                         Point(width,     0), width=float(width)/2000))
@@ -1244,7 +1247,7 @@
         famName = families.getFamNameByName(gn, default=None)
         if famName is not None:
             tmp[famName].add(gn)
-    geneNamesWithSameGreys = tmp.values()
+    geneNamesWithSameGreys = list(tmp.values())
 
     nx = len(chrom1)
     if range1:
@@ -1618,19 +1621,19 @@
         (chr2, range2) = parseChrRange(CDF2, genome2)
         genome1OnlyChr1 = myLightGenomes.LightGenome()
         genome2OnlyChr2 = myLightGenomes.LightGenome()
-        for chrom in genome1.values():
+        for chrom in list(genome1.values()):
             assert isinstance(chrom, myLightGenomes.Chromosome), type(chrom)
         genome1OnlyChr1[chr1] = genome1[chr1][range1[0]:range1[1]]
         genome2OnlyChr2[chr2] = genome2[chr2][range2[0]:range2[1]]
-        for chrom in genome1OnlyChr1.values():
+        for chrom in list(genome1OnlyChr1.values()):
             assert isinstance(chrom, myLightGenomes.Chromosome), type(chrom)
         symbolsInChrom1 = [g.n[0:nbCaractersForGeneNamesInSymlbols] for g in genome1OnlyChr1[chr1]]
         symbolsInChrom2 = [g.n[0:nbCaractersForGeneNamesInSymlbols] for g in genome2OnlyChr2[chr2]]
         nbSpeciesSpecificGenes1 = len([gn for gn in genome1OnlyChr1.getGeneNames(asA=list, checkNoDuplicates=False)
                                        if families.getFamilyByName(gn, default=None) is None])
-        print >> sys.stderr, "the ROI1 contains %s genes (%s species specific genes)" % (len(genome1OnlyChr1[chr1]), nbSpeciesSpecificGenes1)
+        print("the ROI1 contains %s genes (%s species specific genes)" % (len(genome1OnlyChr1[chr1]), nbSpeciesSpecificGenes1), file=sys.stderr)
         nbSpeciesSpecificGenes2 = len([gn for gn in genome2OnlyChr2.getGeneNames(asA=list, checkNoDuplicates=False) if families.getFamilyByName(gn, default=None) is None])
-        print >> sys.stderr, "the ROI2 contains %s genes (%s species specific genes)" % (len(genome2OnlyChr2[chr2]), nbSpeciesSpecificGenes2)
+        print("the ROI2 contains %s genes (%s species specific genes)" % (len(genome2OnlyChr2[chr2]), nbSpeciesSpecificGenes2), file=sys.stderr)
 
         if considerAllPairComps:
             comparedGenome1 = genome1
@@ -1684,8 +1687,8 @@
             (chr1, range1) = parseChrRange(CDF1, g1_tb)
             (chr2, range2) = parseChrRange(CDF2, g2_tb)
         else:
-            mg2tb1 = dict((c, m.old) for (c, m) in mtb2g1.iteritems())
-            mg2tb2 = dict((c, m.old) for (c, m) in mtb2g2.iteritems())
+            mg2tb1 = dict((c, m.old) for (c, m) in mtb2g1.items())
+            mg2tb2 = dict((c, m.old) for (c, m) in mtb2g2.items())
             (chr1, range1) = parseChrRange(CDF1, genome1, g2gtb=mg2tb1)
             (chr2, range2) = parseChrRange(CDF2, genome2, g2gtb=mg2tb2)
 
@@ -1697,8 +1700,8 @@
         symbolsInChromTb1 =  [str(len(tb)) for tb in mtb2g1[chr1].new]
         symbolsInChromTb2 =  [str(len(tb)) for tb in mtb2g2[chr2].new]
 
-        print >> sys.stderr, "the ROI1 contains %s genes" % (sum(len(mtb2g1[chr1][itb]) for (itb, _) in enumerate(genome1tbOnlyTChr1[chr1])))
-        print >> sys.stderr, "the ROI2 contains %s genes" % (sum(len(mtb2g2[chr2][itb]) for (itb, _) in enumerate(genome2tbOnlyTChr2[chr2])))
+        print("the ROI1 contains %s genes" % (sum(len(mtb2g1[chr1][itb]) for (itb, _) in enumerate(genome1tbOnlyTChr1[chr1]))), file=sys.stderr)
+        print("the ROI2 contains %s genes" % (sum(len(mtb2g2[chr2][itb]) for (itb, _) in enumerate(genome2tbOnlyTChr2[chr2]))), file=sys.stderr)
         #Focus on the chromosome of the window, just give simple name to the chromosome of interest
         tb2g1 = mtb2g1[chr1]
         g2tb1 = mtb2g1[chr1].old
@@ -1744,9 +1747,9 @@
 
     # write a simple file with all diagonals into output file
     with open(outSyntenyBlocksFileName, 'w') as f:
-        print >> f, "Mode : %s" % 'Genic scale' if chromosomesRewrittenInTbs is False else 'Tandem Blocks scale'
-        print >> f, "chromosome %s de %s\t%s\t%s\tchromosome %s de %s\t%s\t%s\t%s" % (chr1, genome1.name, 'beginC1', 'endC1', chr2, genome2.name, 'beginC2', 'endC2', 'length in families')
-        print >> f, "c1\tbeg1\tend1\tc2\tbeg2\tend2\thps\tpVal"
+        print("Mode : %s" % 'Genic scale' if chromosomesRewrittenInTbs is False else 'Tandem Blocks scale', file=f)
+        print("chromosome %s de %s\t%s\t%s\tchromosome %s de %s\t%s\t%s\t%s" % (chr1, genome1.name, 'beginC1', 'endC1', chr2, genome2.name, 'beginC2', 'endC2', 'length in families'), file=f)
+        print("c1\tbeg1\tend1\tc2\tbeg2\tend2\thps\tpVal", file=f)
 
         for (sb, id) in listOfDiagsWithIds:
             if isinstance(sb.l1[0], list) and isinstance(sb.l2[0], list):
@@ -1760,7 +1763,7 @@
                 minl2 = min(sb.l2)
                 maxl2 = max(sb.l2)
             # indices of genes start at 1 to be coherent with the output image
-            print >> f, "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s" % (chr1, minl1 + 1, maxl1 + 1, chr2, minl2 + 1, maxl2 + 1, len(sb.la), sb.pVal)
+            print("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s" % (chr1, minl1 + 1, maxl1 + 1, chr2, minl2 + 1, maxl2 + 1, len(sb.la), sb.pVal), file=f)
 
     nbSbs = len(listOfDiagsWithIds)
     writeSVGFileForPairwiseCompOfChrs(genome1.name, chr1, range1,
@@ -1800,18 +1803,18 @@
 #Find diags with the more paralogs
 @myTools.deprecated
 def searchInterestingDiags(listOfDiags, range1, range2):
-    ecart=-sys.maxint-1
+    ecart=-sys.maxsize-1
     diag_=None
     for diag in listOfDiags:
         l1=diag[0][1]
         l2=diag[1][1]
         la=diag[2]
         if len(l1) != len(l2):
-            print >> sys.stderr, "assymetric (on genome1 and genome2) SB of ", len([anc for (anc, _, _, _) in la]), " HPs"
-            print >> sys.stderr, "diag on G1 from %s to %s" % (min(l1[0][0]+range1[0], l1[-1][0]+range1[0]),
-                                                               max(l1[0][0]+range1[0], l1[-1][0]+range1[0]))
-            print >> sys.stderr, "diag on G2 from %s to %s" % (min(l2[0][0]+range2[0], l2[-1][0]+range2[0]),
-                                                               max(l2[0][0]+range2[0], l2[-1][0]+range2[0]))
+            print("assymetric (on genome1 and genome2) SB of ", len([anc for (anc, _, _, _) in la]), " HPs", file=sys.stderr)
+            print("diag on G1 from %s to %s" % (min(l1[0][0]+range1[0], l1[-1][0]+range1[0]),
+                                                               max(l1[0][0]+range1[0], l1[-1][0]+range1[0])), file=sys.stderr)
+            print("diag on G2 from %s to %s" % (min(l2[0][0]+range2[0], l2[-1][0]+range2[0]),
+                                                               max(l2[0][0]+range2[0], l2[-1][0]+range2[0])), file=sys.stderr)
             if ecart < abs(len(l1) - len(la)):
                 ecart = abs(len(l1) - len(la))
                 diag_=diag
@@ -1822,15 +1825,15 @@
     l1 = diag[0][1]
     l2 = diag[1][1]
     la = diag[2]
-    print >> sys.stderr, "The most assymetric diag"
-    print >> sys.stderr, " SB of ", len([anc for (anc, _, _, _) in la]), " HPs"
-    print >> sys.stderr, "diag on G1 = ", [gene[0] + range1[0] for gene in l1]
-    print >> sys.stderr, "diag on G2 = ", [gene[0] + range2[0] for gene in l2]
-
-    minIndiceG1 = sys.maxint
-    maxIndiceG1 = -sys.maxint-1
-    minIndiceG2 = sys.maxint
-    maxIndiceG2 = -sys.maxint-1
+    print("The most assymetric diag", file=sys.stderr)
+    print(" SB of ", len([anc for (anc, _, _, _) in la]), " HPs", file=sys.stderr)
+    print("diag on G1 = ", [gene[0] + range1[0] for gene in l1], file=sys.stderr)
+    print("diag on G2 = ", [gene[0] + range2[0] for gene in l2], file=sys.stderr)
+
+    minIndiceG1 = sys.maxsize
+    maxIndiceG1 = -sys.maxsize-1
+    minIndiceG2 = sys.maxsize
+    maxIndiceG2 = -sys.maxsize-1
     for diag in listOfDiags :
         ((_, l1), (_, l2), _) = diag
         for (i1, _) in l1:
@@ -1839,10 +1842,10 @@
         for (i2, _) in l2:
             minIndiceG2 = i2 if i2 < minIndiceG2 else minIndiceG2
             maxIndiceG2 = i2 if i2 > maxIndiceG2 else maxIndiceG2
-    print >> sys.stderr, 'Indices entre lesquels se trouvents les diagonales sur le G1 = [%s,%s]' % (minIndiceG1+range1[0],
-                                                                                                     maxIndiceG1+range1[0])
-    print >> sys.stderr, 'Indices entre lesquels se trouvents les diagonales sur le G2 = [%s,%s]' % (minIndiceG2+range2[0],
-                                                                                                     maxIndiceG2+range2[0])
+    print('Indices entre lesquels se trouvents les diagonales sur le G1 = [%s,%s]' % (minIndiceG1+range1[0],
+                                                                                                     maxIndiceG1+range1[0]), file=sys.stderr)
+    print('Indices entre lesquels se trouvents les diagonales sur le G2 = [%s,%s]' % (minIndiceG2+range2[0],
+                                                                                                     maxIndiceG2+range2[0]), file=sys.stderr)
 
     return
 
@@ -1851,17 +1854,17 @@
 def chooseChrsAndRanges(genome1, genome2, families, distanceMetric = 'DPD'):
     while True:
         try:
-            (chr1, range1) = parseChrRange(raw_input("chr1:deb1-fin1 = "), genome1)
+            (chr1, range1) = parseChrRange(input("chr1:deb1-fin1 = "), genome1)
             break
         except ValueError:
-            print >> sys.stderr, "You need to write something as chr1:deb1-fin1 with chr1 a chr of G1 and deb1 and fin1 indices of the first and last gene (indices start at 1)"
+            print("You need to write something as chr1:deb1-fin1 with chr1 a chr of G1 and deb1 and fin1 indices of the first and last gene (indices start at 1)", file=sys.stderr)
 
     while True:
         try:
-            (chr2, range2) = parseChrRange(raw_input("chr2:deb2-fin2 = "), genome2)
+            (chr2, range2) = parseChrRange(input("chr2:deb2-fin2 = "), genome2)
             break
         except ValueError:
-            print >> sys.stderr, "You need to write something as chr2:deb2-fin2 with chr2 a chr of G2 and deb2 and fin2 indices of the first and last gene (indices start at 1)"
+            print("You need to write something as chr2:deb2-fin2 with chr2 a chr of G2 and deb2 and fin2 indices of the first and last gene (indices start at 1)", file=sys.stderr)
 
     chrom1 ={}
     chrom2 ={}
@@ -1872,17 +1875,17 @@
                                                       filterType=filterType, minChromLength=minChromLength,
                                                       distanceMetric=distanceMetric, verbose=verbose)
     listOfDiags = list(listOfDiags)
-    print >> sys.stderr, "pairwise comparison of the two chromosomes yields", len(listOfDiags), "diagonals."
+    print("pairwise comparison of the two chromosomes yields", len(listOfDiags), "diagonals.", file=sys.stderr)
     if len(listOfDiags) == 0:
-        print >> sys.stderr, "There is no diag in the considered region of interest"
+        print("There is no diag in the considered region of interest", file=sys.stderr)
     else:
         #recherche des diagonales interessantes a afficher
-        print >> sys.stderr, range1
-        print >> sys.stderr, range2
+        print(range1, file=sys.stderr)
+        print(range2, file=sys.stderr)
         searchInterestingDiags(listOfDiags, range1, range2)
 
-    print >> sys.stderr, "Do you want to chose a new region of interest ?"
-    if raw_input('y/n ? ') == 'y':
+    print("Do you want to chose a new region of interest ?", file=sys.stderr)
+    if input('y/n ? ') == 'y':
         return chooseChrsAndRanges(genome1, genome2, families)
     else:
         return (chrom1, chrom2, range1, range2)
